/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var import0 = require("@angular/forms/src/directives/validators");
var import1 = require("@angular/core/src/change_detection/change_detection_util");
var import3 = require("@angular/core/src/linker/view_utils");
var Wrapper_RequiredValidator = (function () {
    function Wrapper_RequiredValidator() {
        this._changed = false;
        this.context = new import0.RequiredValidator();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_RequiredValidator.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_RequiredValidator.prototype.ngOnDestroy = function () {
    };
    Wrapper_RequiredValidator.prototype.check_required = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.required = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_RequiredValidator.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_RequiredValidator.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = (this.context.required ? '' : null);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'required', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_RequiredValidator.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_RequiredValidator.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_RequiredValidator;
}());
exports.Wrapper_RequiredValidator = Wrapper_RequiredValidator;
var Wrapper_MinLengthValidator = (function () {
    function Wrapper_MinLengthValidator() {
        this._changed = false;
        this._changes = {};
        this.context = new import0.MinLengthValidator();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_MinLengthValidator.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MinLengthValidator.prototype.ngOnDestroy = function () {
    };
    Wrapper_MinLengthValidator.prototype.check_minlength = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.minlength = currValue;
            this._changes['minlength'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_MinLengthValidator.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    };
    Wrapper_MinLengthValidator.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = (this.context.minlength ? this.context.minlength : null);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'minlength', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_MinLengthValidator.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MinLengthValidator.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MinLengthValidator;
}());
exports.Wrapper_MinLengthValidator = Wrapper_MinLengthValidator;
var Wrapper_MaxLengthValidator = (function () {
    function Wrapper_MaxLengthValidator() {
        this._changed = false;
        this._changes = {};
        this.context = new import0.MaxLengthValidator();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_MaxLengthValidator.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MaxLengthValidator.prototype.ngOnDestroy = function () {
    };
    Wrapper_MaxLengthValidator.prototype.check_maxlength = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.maxlength = currValue;
            this._changes['maxlength'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_MaxLengthValidator.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    };
    Wrapper_MaxLengthValidator.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = (this.context.maxlength ? this.context.maxlength : null);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'maxlength', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_MaxLengthValidator.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MaxLengthValidator.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_MaxLengthValidator;
}());
exports.Wrapper_MaxLengthValidator = Wrapper_MaxLengthValidator;
var Wrapper_PatternValidator = (function () {
    function Wrapper_PatternValidator() {
        this._changed = false;
        this._changes = {};
        this.context = new import0.PatternValidator();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_PatternValidator.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PatternValidator.prototype.ngOnDestroy = function () {
    };
    Wrapper_PatternValidator.prototype.check_pattern = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.pattern = currValue;
            this._changes['pattern'] = new import1.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_PatternValidator.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    };
    Wrapper_PatternValidator.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = (this.context.pattern ? this.context.pattern : null);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'pattern', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_PatternValidator.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PatternValidator.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PatternValidator;
}());
exports.Wrapper_PatternValidator = Wrapper_PatternValidator;
var Wrapper_CheckboxRequiredValidator = (function () {
    function Wrapper_CheckboxRequiredValidator() {
        this._changed = false;
        this.context = new import0.CheckboxRequiredValidator();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_CheckboxRequiredValidator.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_CheckboxRequiredValidator.prototype.ngOnDestroy = function () {
    };
    Wrapper_CheckboxRequiredValidator.prototype.check_required = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.required = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_CheckboxRequiredValidator.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_CheckboxRequiredValidator.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_1 = (this.context.required ? '' : null);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementAttribute(el, 'required', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
    };
    Wrapper_CheckboxRequiredValidator.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_CheckboxRequiredValidator.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_CheckboxRequiredValidator;
}());
exports.Wrapper_CheckboxRequiredValidator = Wrapper_CheckboxRequiredValidator;
//# sourceMappingURL=validators.ngfactory.js.map